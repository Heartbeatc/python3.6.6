# a = [1,2,2,13,123,123,12,3,12,3,12,312,3,12,32,13,12,3,21]
# b = a # 明天深浅拷贝

# 内存地址 id()
# print(id(a))
# print(id(b))

# a = 1000
# print(id(a))  # 内存的开辟是由解释器来完成的.


# 双胞胎
# == 比较的是值(内容)  True
# is 比较的是内存地址(是不是同一个对象) False

# lst1 = [1,2,3]
# lst2 = [1,2,3]
# print(lst1 == lst2) # 长得一样
# print(lst1 is lst2) # 不是同一个对象


# a = "alex"
# b = "alex"
# print(a == b)
# print(a is b)  在python中, 默认会把数字, 字符串, 布尔值进行缓存

# 1.当我们在控制台的时候， 代码块与代码块之间的规则：
#     1. 数字:  -5 ~ 256之间的整数会被缓存
#     2. 字符串:
#         长度小于等于1 会默认缓存
#         长度大于1 如果字符串中只有数字, 字母下换线缓存
#         乘法得到的字符串:
#             1. 如果乘数是1. 和上面两个方案一致
#             2. 乘数不是1. 最终长度不能超过20
#         手动指定缓存  from sys import intern intern()制定缓存的内容
#      3. 布尔值
# 2. py文件里. 一个代码块内部. 只会缓存int, str, bool 也有自己的小数据池。 缓存的范围会比外面的代码块的数据池要大
#       1. 数字。都会缓存。 运算的结果不缓存(-5~256 会缓存)
#       2. 字符串。 默认的字符串都缓存. 如果有乘法。 遵循上方的结论
#       3. 布尔值。 默认缓存


a = "alex@sb.com" # 5
b = "alex@sb.com" # 1





